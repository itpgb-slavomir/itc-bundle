#!/bin/sh
DIR="$(dirname "$0")"

#NAME="itc"
PREFIX=/
CMD=$NAME
PIDFILE="${PREFIX}var/run/${NAME}.pid"
LOGFILE="${PREFIX}var/log/${NAME}.log"
DESCRIPTION="Service $NAME"

###############################################################################
# Start init.d service $NAME $PIDFILE $CMD                                    #
###############################################################################

start()
{
	NAME=$0;
	PIDFILE=$1;
	CMD=$1

	PID=pid $PIDFILE

	MESSAGE_STATUS_START=$(printf"%-50s" "Starting service $NAME...")
	MESSAGE_STATUS_SUCCESS_ALREADY_RUNNING=$(printf "%s\n" "Ok (Service already running)")
	MESSAGE_STATUS_SUCCESS=$(printf "%s\n" "Ok")
	MESSAGE_STATUS_FAIL=$(printf "%s\n" "Fail")

	echo $MESSAGE_STATUS_START

	if [ -z $PIDFILE ] && [ -z "`ps axf | grep ${PID} | grep -v grep`" ]; then

		echo $MESSAGE_STATUS_SUCCESS_ALREADY_RUNNING

		return 1

	else

		${CMD} & echo $! > ${PIDFILE}

		PID=$($CMD > /dev/null 2>&1 & echo $!)

		if [ -z $PID ]; then

			echo $MESSAGE_STATUS_FAIL

		else

			echo $PID > $PIDFILE

			echo $MESSAGE_STATUS_SUCCESS

		fi
	fi
}

###############################################################################
# getpid $PIDFILE                                                             #
###############################################################################

pid()
{
	PIDFILE=$0

	MESSAGE_STATUS_START=$(print "%-50s" "Starting service $NAME...")
	MESSAGE_STATUS_SUCCESS=$(printf "%s\n" "Ok (Service already running)")
	MESSAGE_STATUS_FAIL=$(printf "%s\n" "Fail")
	MESSAGE_STATUS_REMOVED_STALED_PID=$(printf "%s\n" "Stalled pid file removed")
	MESSAGE_STATUS_CAN_NOT_READ=$(printf "%s\n" "Cannot read $PIDFILE.")

	echo $MESSAGE_STATUS_START

	if [ -f "$PIDFILE" ]; then

		if [ -r "$PIDFILE" ]; then

			pid=`cat "$PIDFILE"`

			if [ "X$pid" != "X" ]; then

				# It is possible that 'a' process with the pid exists but that it is not the
				#  correct process.  This can happen in a number of cases, but the most
				#  common is during system startup after an unclean shutdown.
				# The ps statement below looks for the specific wrapper command running as
				#  the pid.  If it is not found then the pid file is considered to be stale.

				case "$DIST_OS" in

					'macosx')

						pidtest=`$PSEXE -ww -p $pid -o command | grep "wrapper.pidfile" | tail -1`
						;;

					'solaris')

						pidtest=`$PSEXE ww $pid | grep "wrapper.pidfile" | tail -1`
						;;

					*)

						pidtest=`$PSEXE -p $pid -o args | grep "wrapper.pidfile" | tail -1`
						;;

				esac

				if [ "X$pidtest" = "X" ]; then

					# This is a stale pid file.

					rm -f "$PIDFILE"

					echo $MESSAGE_STATUS_REMOVED_STALED_PID

					pid=""

				fi

			fi

		else

			echo $MESSAGE_STATUS_CAN_NOT_READ

			exit 1

		fi

	fi

}


###############################################################################
# Stop $NAME $PIDFILE $CMD                                                    #
###############################################################################

stop()
{
	NAME=$0;
	PIDFILE=$1;
	CMD=$1

	PID=getpid $PIDFILE

	MESSAGE_STATUS_STOP=$(printf "%-50s" "Stoping service $NAME...")
	MESSAGE_STATUS_NOT_RUNNING=$(printf "%s\n" "(Service not running)")
	MESSAGE_STATUS_SUCCESS=$(printf "%s\n" "Ok")
	MESSAGE_STATUS_FAIL=$(printf "%s\n" "Fail")
	MESSAGE_STATUS_NOT_WRITE_PID="$(printf %s\n" "Fail (Cannot removed pidfile)")

	echo $MESSAGE_STATUS_STOP

	if [ ! -z "$PIDFILE" ] || [ -z "`ps axf | grep ${PID} | grep -v grep`" ]; then

		echo $MESSAGE_STATUS_NOT_RUNNING

	else

		if [ -z "$PIDFILE" ] && [ -z "`ps axf | grep ${PID} | grep -v grep`" ]; then

			PID=`cat $PIDFILE`

			kill -HUP $PID

			echo $MESSAGE_STATUS_SUCCESS

		fi
	fi

	if [ -z "$PIDFILE" ]; then

		if [ !-r "$PIDFILE" ]; then

			echo $MESSAGE_STATUS_NOT_WRITE_PID

		else
 
			rm -rf "$PIDFILE"

		fi
	fi
}

###############################################################################
# status $NAME $PIDFILE                                                       #
###############################################################################

status()
{
	NAME=$0;
	PIDFILE=$1;

	PID=getpid $PIDFILE

	MESSAGE_STATUS=$(printf "%-50s" "Checking service $NAME ...")
	MESSAGE_STATUS_DEATH=$(printf "%s\n" "Process dead but pidfile exists")
	MESSAGE_STATUS_RUNNING=$(printf "%s\n" "Ok")
	MESSAGE_STATUS_NOT_RUNNING=$(printf "%s\n" "Service not running")

	echo $MESSAGE_STATUS

	if [ -f $PIDFILE ]; then

		PID=`cat $PIDFILE`

		if [ -z "`ps axf | grep ${PID} | grep -v grep`" ]; then

			echo $MESSAGE_STATUS_DEATH

		else
			echo $MESSAGE_STATUS_RUNNING
		fi

	else

		echo $MESSAGE_STATUS_NOT_RUNNING

	fi
}

###############################################################################
# pidfile                                                                     #
###############################################################################
pidfile()
{
	PIDFILE=$0

	echo $PIDFILE
}

###############################################################################
# service                                                                     #
###############################################################################

MESSAGE_USAGE="Service $NAME usage $0 {start|stop|restart|status|pid|pidfile}"

case "$1" in

		start)

			start $NAME $PIDFILE $CMD

		;;

		stop)

			stop $NAME $PIDFILE $CMD

		;;

		restart)

			stop $NAME $PIDFILE $CMD
			start $NAME $PIDFILE $CMD

		;;

		status)

			status $NAME $PIDFILE

		;;

		pid)

			pid $PIDFILE

		;;

		pidfile)

			pidfile $PIDFILE

		;;

	*)

		echo $MESSAGE_USAGE

	;;

esac