<?php

namespace SK\ITCBundle\Command\Code\Generator\DockBlock;

use SK\ITCBundle\Command\Code\Generator\GeneratorCommand;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Helper\Table;
use SK\ITCBundle\Code\Generator\DocBlockGenerator;

/**
 *
 * @author jahman
 *        
 */
class DocBlockCommand extends GeneratorCommand
{

	/**
	 *
	 * {@inheritDoc}
	 *
	 * @see \SK\ITCBundle\Command\Code\Generator\GeneratorCommand::__construct()
	 */
	public function __construct( 
		$name = "src:docblock", 
		$description = "Source Code Documentation Blocks" )
	{

		parent::__construct( $name, $description );
	
	}

	/**
	 * (non-PHPdoc)
	 *
	 * @see \SK\ITCBundle\Code\Generator\PHPUnit\AbstractGenerator::execute($input, $output)
	 */
	public function execute( 
		InputInterface $input, 
		OutputInterface $output )
	{

		parent::execute( $input, $output );
		
		$classReflections = $this->getClassReflections();
		
		$header = array( 
			'Namespace Name',
			'Class',
			'Short Description' 
		);
		
		$rows = array();
		
		foreach( $classReflections as $classReflection )
		{
			
			if( $classReflection->getDocBlock() )
			{
				$classDocBlock = DocBlockGenerator::fromReflection( $classReflection->getDocBlock() );
			}
			else
			{
				$classDocBlock = new DocBlockGenerator( 
					str_replace( "\\", " ", $classReflection->getName() ), 
					"This Documentation is autogenerated by " . __CLASS__ );
			}
			$shortDescription = $classDocBlock->getShortDescription();
			
			$row = array( 
				$classReflection->getNamespaceName(),
				$classReflection->getShortName(),
				$shortDescription 
			);
			$tags = $classDocBlock->getTags();
			var_export( $tags );
			
			foreach( $tags as $tag )
			{
				
				$tagName = $tag->getName();
				$header[ $tagName ] = $tagName;
				$row[ $tagName ] = $tag->generate();
			}
			
			$rows[] = $row;
		}
		
		$table = new Table( $this->getOutput() );
		$table->setHeaders( $header );
		$table->setRows( $rows );
		$table->render();
		
		$this->writeLine();
	
	}

}